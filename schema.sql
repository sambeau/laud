
CREATE OR REPLACE FUNCTION "public"."add_to_popularity_score"("score" real, "asin" "text") RETURNS "void"
	LANGUAGE "plpgsql"
	AS $$BEGIN
  UPDATE public.books
  SET popularity = popularity + score
  WHERE asin = asin;
END;$$;

ALTER FUNCTION "public"."add_to_popularity_score"("score" real, "asin" "text") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."get_book_tags"() RETURNS TABLE("asin" "text", "tags" "text"[])
	LANGUAGE "plpgsql"
	AS $$
BEGIN
  RETURN QUERY
  SELECT
	asin,
	array_agg(tag) as tags
  FROM
	public.tags
  GROUP BY
	asin;
END;
$$;

ALTER FUNCTION "public"."get_book_tags"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."get_books_by_tag"("asin_param" "text", "tag_param" "text") RETURNS TABLE("title" "text", "author" "text")
	LANGUAGE "plpgsql"
	AS $$
BEGIN
  RETURN QUERY
	SELECT
	  title,
	  author
	FROM
	  public.books
	WHERE
	  asin IN (
		SELECT
		  asin
		FROM
		  public.tags
		WHERE
		  tag = tag_param
	  )
	  AND asin = asin_param;
END;
$$;

ALTER FUNCTION "public"."get_books_by_tag"("asin_param" "text", "tag_param" "text") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."insert_tag"("tag" "text", "asin" "text") RETURNS "void"
	LANGUAGE "plpgsql"
	AS $$
BEGIN
  INSERT INTO public.tags (tag, asin)
  VALUES (tag, asin)
  ON CONFLICT DO NOTHING;
END;
$$;

ALTER FUNCTION "public"."insert_tag"("tag" "text", "asin" "text") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."update_all_tags"() RETURNS "void"
	LANGUAGE "plpgsql"
	AS $$
BEGIN
  insert into
	public.tags (tag, asin)
  select
	unnest(tags),
	asin
  from
	public.books
  where
	tags is not null
  on conflict (tag, asin) do nothing;
END;
$$;

ALTER FUNCTION "public"."update_all_tags"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."banned_tags" (
	"id" bigint NOT NULL,
	"tag" "text"
);

ALTER TABLE "public"."banned_tags" OWNER TO "postgres";

ALTER TABLE "public"."banned_tags" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
	SEQUENCE NAME "public"."banned_id_seq"
	START WITH 1
	INCREMENT BY 1
	NO MINVALUE
	NO MAXVALUE
	CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."banned_words" (
	"id" bigint NOT NULL,
	"word" "text"
);

ALTER TABLE "public"."banned_words" OWNER TO "postgres";

ALTER TABLE "public"."banned_words" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
	SEQUENCE NAME "public"."banned_words_id_seq"
	START WITH 1
	INCREMENT BY 1
	NO MINVALUE
	NO MAXVALUE
	CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."books" (
	"id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
	"inserted_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
	"updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
	"asin" "text" NOT NULL,
	"title" "text" NOT NULL,
	"subtitle" "text",
	"author" "text" NOT NULL,
	"authorlink" "text",
	"series" "text",
	"serieslink" "text",
	"format" "text",
	"releasedate" "date",
	"image" "text",
	"sample" "text",
	"link" "text" NOT NULL,
	"summary" "text",
	"copyright" "text",
	"tags" "text"[],
	"ratingsoverall" "json",
	"ratingsperformance" "json",
	"ratingsstory" "json",
	"rating" real,
	"ratingperformance" real,
	"ratingstory" real,
	"durationInMins" integer,
	"popularity" real DEFAULT '0'::real
);

ALTER TABLE "public"."books" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."tags" (
	"id" bigint NOT NULL,
	"tag" "text" NOT NULL,
	"asin" "text" NOT NULL
);

ALTER TABLE "public"."tags" OWNER TO "postgres";

ALTER TABLE "public"."tags" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
	SEQUENCE NAME "public"."tags_id_seq"
	START WITH 1
	INCREMENT BY 1
	NO MINVALUE
	NO MAXVALUE
	CACHE 1
);

ALTER TABLE ONLY "public"."banned_tags"
	ADD CONSTRAINT "banned_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."banned_words"
	ADD CONSTRAINT "banned_words_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."books"
	ADD CONSTRAINT "books_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."tags"
	ADD CONSTRAINT "tags_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."tags"
	ADD CONSTRAINT "tags_tag_asin_key" UNIQUE ("tag", "asin");

CREATE INDEX "idx_books_asin" ON "public"."books" USING "btree" ("asin");

CREATE INDEX "idx_tags_tag" ON "public"."tags" USING "btree" ("tag");
